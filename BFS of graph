

BFS of graph
Difficulty: EasyAccuracy: 44.09%Submissions: 473K+Points: 2Average Time: 10m
Given a connected undirected graph containing V vertices, represented by a 2-d adjacency list adj[][],
where each adj[i] represents the list of vertices connected to vertex i.
Perform a Breadth First Search (BFS) traversal starting from vertex 0, visiting vertices from left to right 
according to the given adjacency list, and return a list containing the BFS traversal of the graph.

Note: Do traverse in the same order as they are in the given adjacency list.

Examples:

Input: adj[][] = [[2, 3, 1], [0], [0, 4], [0], [2]]

Output: [0, 2, 3, 1, 4]
Explanation: Starting from 0, the BFS traversal will follow these steps: 
Visit 0 → Output: 0 
Visit 2 (first neighbor of 0) → Output: 0, 2 
Visit 3 (next neighbor of 0) → Output: 0, 2, 3 
Visit 1 (next neighbor of 0) → Output: 0, 2, 3, 
Visit 4 (neighbor of 2) → Final Output: 0, 2, 3, 1, 4
Input: adj[][] = [[1, 2], [0, 2], [0, 1, 3, 4], [2], [2]]

Output: [0, 1, 2, 3, 4]
Explanation: Starting from 0, the BFS traversal proceeds as follows: 
Visit 0 → Output: 0 
Visit 1 (the first neighbor of 0) → Output: 0, 1 
Visit 2 (the next neighbor of 0) → Output: 0, 1, 2 
Visit 3 (the first neighbor of 2 that hasn't been visited yet) → Output: 0, 1, 2, 3 
Visit 4 (the next neighbor of 2) → Final Output: 0, 1, 2, 3, 4

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


import java.util.*;

public class GraphBFS {
    public static List<Integer> bfsOfGraph(int V, List<List<Integer>> adj) {
        // List to store BFS traversal
        List<Integer> bfsResult = new ArrayList<>();
        // Visited array to keep track of visited vertices
        boolean[] visited = new boolean[V];
        // Queue for BFS
        Queue<Integer> queue = new LinkedList<>();
        
        // Start BFS from vertex 0
        queue.add(0);
        visited[0] = true;
        
        while (!queue.isEmpty()) {
            // Dequeue a vertex from the queue
            int current = queue.poll();
            bfsResult.add(current);
            
            // Traverse its adjacent vertices
            for (int neighbor : adj.get(current)) {
                if (!visited[neighbor]) {
                    queue.add(neighbor);
                    visited[neighbor] = true; // Mark the vertex as visited
                }
            }
        }
        return bfsResult;
    }
    
    public static void main(String[] args) {
        int V = 5;
        // Example adjacency list representation of the graph
        List<List<Integer>> adj = new ArrayList<>();
        adj.add(Arrays.asList(1, 2, 3)); // Vertex 0 connects to 1, 2, 3
        adj.add(Arrays.asList(0, 4));    // Vertex 1 connects to 0, 4
        adj.add(Arrays.asList(0));       // Vertex 2 connects to 0
        adj.add(Arrays.asList(0));       // Vertex 3 connects to 0
        adj.add(Arrays.asList(1));       // Vertex 4 connects to 1
        
        // Perform BFS
        List<Integer> bfsTraversal = bfsOfGraph(V, adj);
        System.out.println(bfsTraversal); // Output: [0, 1, 2, 3, 4]
    }
}
