Given a connected undirected graph containing V vertices represented by a 2-d adjacency list adj[][], where each adj[i] represents the list of vertices connected to vertex i. Perform a Depth First Search (DFS) traversal starting from vertex 0, visiting vertices from left to right as per the given adjacency list, and return a list containing the DFS traversal of the graph.

Note: Do traverse in the same order as they are in the given adjacency list.

Examples:

Input: adj[][] = [[2, 3, 1], [0], [0, 4], [0], [2]]

Output: [0, 2, 4, 3, 1]
Explanation: Starting from 0, the DFS traversal proceeds as follows:
Visit 0 → Output: 0 
Visit 2 (the first neighbor of 0) → Output: 0, 2 
Visit 4 (the first neighbor of 2) → Output: 0, 2, 4 
Backtrack to 2, then backtrack to 0, and visit 3 → Output: 0, 2, 4, 3 
Finally, backtrack to 0 and visit 1 → Final Output: 0, 2, 4, 3, 1
Input: adj[][] = [[1, 2], [0, 2], [0, 1, 3, 4], [2], [2]]

Output: [0, 1, 2, 3, 4]
Explanation: Starting from 0, the DFS traversal proceeds as follows: 
Visit 0 → Output: 0 
Visit 1 (the first neighbor of 0) → Output: 0, 1 
Visit 2 (the first neighbor of 1) → Output: 0, 1, 2 
Visit 3 (the first neighbor of 2) → Output: 0, 1, 2, 3 
Backtrack to 2 and visit 4 → Final Output: 0, 1, 2, 3, 4

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;

public class GraphDFS {
    public static List<Integer> dfsOfGraph(int V, List<List<Integer>> adj) {
        // List to store the DFS traversal
        List<Integer> dfsResult = new ArrayList<>();
        // Visited array to track visited nodes
        boolean[] visited = new boolean[V];
        
        // Call the recursive helper function starting from vertex 0
        dfs(0, adj, visited, dfsResult);
        return dfsResult;
    }

    private static void dfs(int node, List<List<Integer>> adj, boolean[] visited, List<Integer> dfsResult) {
        // Mark the current node as visited and add it to the result
        visited[node] = true;
        dfsResult.add(node);

        // Visit all the unvisited neighbors of the current node
        for (int neighbor : adj.get(node)) {
            if (!visited[neighbor]) {
                dfs(neighbor, adj, visited, dfsResult);
            }
        }
    }

    public static void main(String[] args) {
        int V = 5;
        // Adjacency list representation of the graph
        List<List<Integer>> adj = new ArrayList<>();
        adj.add(Arrays.asList(1, 2, 3)); // Neighbors of vertex 0
        adj.add(Arrays.asList(0, 4));    // Neighbors of vertex 1
        adj.add(Arrays.asList(0));       // Neighbors of vertex 2
        adj.add(Arrays.asList(0));       // Neighbors of vertex 3
        adj.add(Arrays.asList(1));       // Neighbors of vertex 4

        // Perform DFS and print the result
        List<Integer> dfsTraversal = dfsOfGraph(V, adj);
        System.out.println("DFS Traversal: " + dfsTraversal);
    }
}



