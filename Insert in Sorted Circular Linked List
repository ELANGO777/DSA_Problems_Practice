Given a sorted circular linked list, the task is to insert a
new node in this circular linked list so that it remains a sorted circular linked list.


class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class CircularLinkedList {
    Node head;

    // Function to insert a new node while maintaining sorted order
    public void sortedInsert(int data) {
        Node newNode = new Node(data);

        // Case 1: Empty List
        if (head == null) {
            newNode.next = newNode; // Circular reference
            head = newNode;
            return;
        }

        // Case 2: Insert before head (smallest element)
        if (data < head.data) {
            Node temp = head;
            while (temp.next != head) {
                temp = temp.next; // Find the last node
            }
            newNode.next = head;
            temp.next = newNode;
            head = newNode;
            return;
        }

        // Case 3: Insert in correct position or at the end
        Node current = head;
        while (current.next != head && current.next.data < data) {
            current = current.next;
        }

        newNode.next = current.next;
        current.next = newNode;
    }

    // Function to print the circular linked list
    public void printList() {
        if (head == null) return;

        Node temp = head;
        do {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        } while (temp != head);
        System.out.println("(back to head)");
    }

    public static void main(String[] args) {
        CircularLinkedList cll = new CircularLinkedList();
        cll.sortedInsert(10);
        cll.sortedInsert(20);
        cll.sortedInsert(5);
        cll.sortedInsert(15);

        cll.printList(); // Output: 5 -> 10 -> 15 -> 20 -> (back to head)
    }
}
