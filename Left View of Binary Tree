You are given the root of a binary tree. Your task is to return the left view of the binary tree. 
The left view of a binary tree is the set of nodes visible when the tree is viewed from the left side.

If the tree is empty, return an empty list.

===================================================================================
import java.util.*;

class TreeNode {
    int val;
    TreeNode left, right;

    TreeNode(int val) {
        this.val = val;
        left = right = null;
    }
}

public class LeftViewBinaryTree {
    public static List<Integer> leftView(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if (root == null) return result;

        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            int levelSize = queue.size(); // Number of nodes in the current level

            for (int i = 0; i < levelSize; i++) {
                TreeNode current = queue.poll();

                // Capture the first node of each level (leftmost)
                if (i == 0) {
                    result.add(current.val);
                }

                // Add child nodes for next level traversal
                if (current.left != null) queue.add(current.left);
                if (current.right != null) queue.add(current.right);
            }
        }
        return result;
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.right = new TreeNode(5);
        root.left.left = new TreeNode(4);
        root.right.right = new TreeNode(6);

        System.out.println("Left View: " + leftView(root)); // Output: [1, 2, 4]
    }
}
