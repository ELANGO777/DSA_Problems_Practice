import java.util.*;

class TreeNode {
    int val;
    TreeNode left, right;

    TreeNode(int val) {
        this.val = val;
        left = right = null;
    }
}

public class SpiralLevelOrderTraversal {
    public static List<Integer> spiralOrder(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if (root == null) return result;

        Stack<TreeNode> leftToRight = new Stack<>();
        Stack<TreeNode> rightToLeft = new Stack<>();

        leftToRight.push(root);

        while (!leftToRight.isEmpty() || !rightToLeft.isEmpty()) {
            while (!leftToRight.isEmpty()) {
                TreeNode node = leftToRight.pop();
                result.add(node.val);

                // Push children in right-to-left order for next level
                if (node.right != null) rightToLeft.push(node.right);
                if (node.left != null) rightToLeft.push(node.left);
            }

            while (!rightToLeft.isEmpty()) {
                TreeNode node = rightToLeft.pop();
                result.add(node.val);

                // Push children in left-to-right order for next level
                if (node.left != null) leftToRight.push(node.left);
                if (node.right != null) leftToRight.push(node.right);
            }
        }
        return result;
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.right.left = new TreeNode(6);
        root.right.right = new TreeNode(7);

        System.out.println("Spiral Level Order Traversal: " + spiralOrder(root)); 
        // Output: [1, 3, 2, 4, 5, 6, 7]
    }
}

INPUT -

        1
       / \
      2   3
     / \  / \
    4   5 6  7

OUTPUT -

Spiral Level Order Traversal: [1, 3, 2, 4, 5, 6, 7]
